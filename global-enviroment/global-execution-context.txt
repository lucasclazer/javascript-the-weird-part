Whenever the JavaScript code it's wraps inside the 
Excution Context. The base excution context is the Global.
It's create a 'Global Object' and 'this' that references the 
'Global Object'.

for some example you can run:

when you open your browser and type 'this' you can see the 
global-Environment of the this project or you can use windows.
Theese are the JavaScript Global Excution Context created when
your code is transpiled to the browser.


The Creating Phase:
- Global Object
- 'this' (reference to Global Object)
- Outer Environment
- Setup Memory Space for Variables and Functions "Hoisting"

When JavaScript Engine will be setup (Hoisting) in the 
Creating Phase the Environment will setup all memory for 
Variables and Functions.

So Variables and Functions are all set equal to 'undefined', Its 
important to leave for the Javascript Engine to initialize the variables
with 'undefined' because if you do that. You I'll never know who was initialized
that variable. Initializing variables with 'undefined' are not good practise.  

The Execution phase:
 In execution phase the Javascript engine it will run it, interpreting it and
 compiling it, your code line by line. 

    Example code of Creating and execution code

        function b(){
            console.log("Called b");
        }

        b(); //this will be executed on Execution Phase only;

        console.log(a); //will return undefined because the

        var a = "Hello world";

        console.log(a); //this will be executed on Creation Phase;


The Excution Stack Concept:
    function a()
    {
        b(); //creates another execution context and execute
    }

    function b(){
        var d; //creates another execution context and execute
    }

    a();// creates execution context and pushes to top of excution stack.
    var d;

    stack excution: 
       1: [ b, a, GlobalExecution]
       2: [ a, GlobalExecution]
       3: [GlobalExecution]

The Scope Chain:
 Remembering the concepts of the Creation Phase JavaScript has an Outer Enviroment. This Outer
 Enviroment carries a reference from where the actual context is beeing called. So is because 
 of that we didn't got an undeclared variable error when we call the function b();

    example:
        function b(){
            console.log(myVar)
        }

        function a(){
            var myVar = 2; 
            b()
        }

    
        var myVar = 1;
        a();

        Outputs: will be 1

        stack: [
            ExcutionContext1: { outerEnvironment: reference's to GlobalExcutionContext }
            ExcutionContext2: { myVar: 2, outerEnvironment: reference's to GlobalExcutionContext }
            GlobalExcutionContext: { myVar: 1}
        ] 









